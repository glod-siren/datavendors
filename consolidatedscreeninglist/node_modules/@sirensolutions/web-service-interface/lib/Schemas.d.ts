import * as JoiValidators from 'joi';
export interface InputSchema {
    [input: string]: {
        type: ElasticsearchFieldDatatype | 'any';
        required?: boolean;
        description?: string;
    };
}
export declare type OutputConfiguration = ExternalIndexMappings | Mapping;
export interface ExternalIndexMappings {
    [indexName: string]: NestedMapping;
}
export interface NestedMapping {
    [field: string]: ElasticsearchFieldDatatype | NestedMapping;
}
export interface Mapping {
    [field: string]: ElasticsearchFieldDatatype;
}
export declare type ElasticsearchFieldDatatype = 'text' | 'keyword' | 'date' | 'long' | 'float' | 'boolean' | 'ip' | 'geo_point';
export interface DataIndexResults {
    [indexName: string]: Record<string, any>[];
}
export interface SimpleMap {
    [key: string]: string | number | boolean | undefined;
}
export declare const Joi: {
    any: typeof JoiValidators.any;
    array: typeof JoiValidators.array;
    bool: typeof JoiValidators.bool;
    boolean: typeof JoiValidators.boolean;
    binary: typeof JoiValidators.binary;
    date: typeof JoiValidators.date;
    number: typeof JoiValidators.number;
    object: typeof JoiValidators.object;
    string: typeof JoiValidators.string;
};
