import { DataIndexResults, InputSchema, OutputConfiguration, SimpleMap } from './Schemas';
export declare abstract class ServiceDefinition<Config = any> {
    /**
     * The config for the service as declared in the Investigate configuration file.
     */
    protected config: Config;
    constructor(config: Config);
    /**
     * The name of the service; this name must be unique within the service group.
     */
    abstract readonly name: string;
    /**
     * A description of the input Entity IDs (EID) that this service accepts during invocation.
     * Alternatively, a string can be provided which represents an index name; this means that
     * the service can be invoked with documents from this index.
     */
    abstract readonly inputSchema: InputSchema;
    /**
     * A service may store simple results in the automatically created invocation index, or have
     * multiple indices created dedicated to more complex types of results. Either way, a mapping
     * needs to be specified that describes the structure and typing of the invocation results.
     * If set to undefined, the web service response structure can be variable, but it will not
     * be stored in Elasticsearch and can only be invoked from a Siren scripting context.
     */
    abstract readonly outputConfiguration: OutputConfiguration | undefined;
    /**
     * If the web service returns data with a variable structure (outputConfiguration is set to undefined),
     * the invocation metadata (timestamp, user, inputs, etc.) is not stored. To change this behaviour, set
     * keepInvocationHistory to true. This is only applicable to variable response web services and must not
     * be set if the web service has a defined structure (in which case, invocation history is always kept).
     */
    readonly keepInvocationHistory?: boolean;
    /**
     * The invocation logic that must be implemented by the service. This involves accessing
     * external service APIs and processing the results. The returned object describes the output
     * as well as which of the service's indices the results go into.
     */
    abstract invoke(params: object): Promise<SimpleMap | DataIndexResults | any>;
}
