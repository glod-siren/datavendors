"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
class IpObservations extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'ip_observations';
        this.inputSchema = {
            ip: { type: 'text', required: true },
            startTime: { type: 'date', required: false },
            endTime: { type: 'date', required: false }
        };
        this.outputConfiguration = {
            observation: {
                'lat': 'long',
                'long': 'long',
                'timestamp': 'date',
                'geo_location': 'geo_point',
                'ipAddress': 'keyword',
                'port': 'keyword'
            }
        };
    }
    async invoke(inputs) {
        let obs_url = `https://iapi.chainalysis.com/observations/ips/${inputs.ip}?size=200`;
        if (inputs.startTime) {
            obs_url = obs_url + `&startTime=${inputs.startTime}`;
        }
        if (inputs.endTime) {
            obs_url = obs_url + `&endTime=${inputs.endTime}`;
        }
        const obs_config = {
            method: 'get',
            url: obs_url,
            headers: {
                'Accept': 'application/json',
                'token': this.config.token
            }
        };
        const obs_response = await axios_1.default(obs_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
        let truncated = false;
        if (obs_response.data.nextPage != null) {
            let page = obs_response.data.nextPage;
            let lastResult = { nextPage: '' };
            do {
                try {
                    let sub_url = obs_url + `&page=${page}`;
                    const sub_config = {
                        method: 'get',
                        url: sub_url,
                        headers: {
                            'Accept': 'application/json',
                            'token': this.config.token
                        }
                    };
                    const sub_response = await axios_1.default(sub_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
                    lastResult = sub_response.data;
                    obs_response.data.items.push.apply(obs_response.data.items, sub_response.data.items);
                }
                catch {
                    new web_service_interface_1.WebServiceError('pagination error');
                }
            } while (lastResult.nextPage !== null && obs_response.data.items < 5000);
            if (lastResult.nextPage !== null || lastResult.nextPage !== '') {
                truncated = true;
            }
        }
        for (let y = 0; y < obs_response.data.items.length; y++) {
            let plain_asset = obs_response.data.items[y].software.match(/bitcoin|ethereum/);
            let asset = '';
            if (plain_asset == 'bitcoin') {
                asset = 'BTC';
            }
            if (plain_asset == 'ethereum') {
                asset = 'ETH';
            }
            let denormAddress = [];
            denormAddress.push(`${asset}:${obs_response.data.items[y].walletRootAddress}`);
            denormAddress.push(`${asset}:${obs_response.data.items[y].rootAddress}`);
            Object.assign(obs_response.data.items[y], {
                sirenDenormAddress: ([...new Set(denormAddress)]),
                id: obs_response.data.items[y].ipAddress + ':' + obs_response.data.items[y].timestamp,
                address: obs_response.data.items[y].walletRootAddress,
                rootAddress: obs_response.data.rootAddress,
                geo_location: obs_response.data.items[y].lat + ',' + obs_response.data.items[y].long
            });
        }
        return {
            observation: obs_response.data.items
        };
    }
}
exports.default = IpObservations;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q29udGVudCI6WyJpbXBvcnQgeyBEYXRhSW5kZXhSZXN1bHRzLCBJbnB1dFNjaGVtYSwgT3V0cHV0Q29uZmlndXJhdGlvbiwgU2VydmljZURlZmluaXRpb24sIFdlYlNlcnZpY2VFcnJvciB9IGZyb20gJ0BzaXJlbnNvbHV0aW9ucy93ZWItc2VydmljZS1pbnRlcmZhY2UnO1xyXG5pbXBvcnQgYXhpb3MsIHsgQXhpb3NSZXF1ZXN0Q29uZmlnLCBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJcE9ic2VydmF0aW9ucyBleHRlbmRzIFNlcnZpY2VEZWZpbml0aW9uIHtcclxuICAgIHJlYWRvbmx5IG5hbWUgPSAnaXBfb2JzZXJ2YXRpb25zJztcclxuICAgIHJlYWRvbmx5IGlucHV0U2NoZW1hOiBJbnB1dFNjaGVtYSA9IHtcclxuICAgICAgICBpcDogeyB0eXBlOiAndGV4dCcsIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICAgICAgc3RhcnRUaW1lOiB7IHR5cGU6ICdkYXRlJywgcmVxdWlyZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgZW5kVGltZTogeyB0eXBlOiAnZGF0ZScsIHJlcXVpcmVkOiBmYWxzZSB9XHJcbiAgICB9O1xyXG4gICAgcmVhZG9ubHkgb3V0cHV0Q29uZmlndXJhdGlvbjogT3V0cHV0Q29uZmlndXJhdGlvbiA9IHtcclxuICAgICAgICBvYnNlcnZhdGlvbjoge1xyXG4gICAgICAgICAgICAnbGF0JyA6ICdsb25nJyxcclxuICAgICAgICAgICAgJ2xvbmcnOiAnbG9uZycsXHJcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiAnZGF0ZScsXHJcbiAgICAgICAgICAgICdnZW9fbG9jYXRpb24nOiAnZ2VvX3BvaW50JyxcclxuICAgICAgICAgICAgJ2lwQWRkcmVzcyc6ICdrZXl3b3JkJyxcclxuICAgICAgICAgICAgJ3BvcnQnOiAna2V5d29yZCdcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYXN5bmMgaW52b2tlKGlucHV0czoge1xyXG4gICAgICAgIGlwOiBzdHJpbmcsXHJcbiAgICAgICAgc3RhcnRUaW1lOiBzdHJpbmcsXHJcbiAgICAgICAgZW5kVGltZTogc3RyaW5nXHJcbiAgICB9KTogUHJvbWlzZTxEYXRhSW5kZXhSZXN1bHRzPiB7XHJcbiAgICAgICAgbGV0IG9ic191cmwgPSBgaHR0cHM6Ly9pYXBpLmNoYWluYWx5c2lzLmNvbS9vYnNlcnZhdGlvbnMvaXBzLyR7aW5wdXRzLmlwfT9zaXplPTIwMGBcclxuICAgICAgICBpZiAoaW5wdXRzLnN0YXJ0VGltZSkge29ic191cmwgPSBvYnNfdXJsICsgYCZzdGFydFRpbWU9JHtpbnB1dHMuc3RhcnRUaW1lfWB9XHJcbiAgICAgICAgaWYgKGlucHV0cy5lbmRUaW1lKSB7b2JzX3VybCA9IG9ic191cmwgKyBgJmVuZFRpbWU9JHtpbnB1dHMuZW5kVGltZX1gfVxyXG4gICAgICAgIGNvbnN0IG9ic19jb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBvYnNfdXJsLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgJ3Rva2VuJzogdGhpcy5jb25maWcudG9rZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgb2JzX3Jlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlID0gYXdhaXQgYXhpb3Mob2JzX2NvbmZpZykuY2F0Y2goZXJyID0+IFByb21pc2UucmVqZWN0KGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2Uuc3RhdHVzIDwgNTAwID8gbmV3IFdlYlNlcnZpY2VFcnJvcihlcnIucmVzcG9uc2UuZGF0YSkgOiBlcnIpKTtcclxuICAgICAgICBsZXQgdHJ1bmNhdGVkID0gZmFsc2VcclxuICAgICAgICBpZiAob2JzX3Jlc3BvbnNlLmRhdGEubmV4dFBhZ2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZXQgcGFnZSA9IG9ic19yZXNwb25zZS5kYXRhLm5leHRQYWdlXHJcbiAgICAgICAgICAgIGxldCBsYXN0UmVzdWx0ID0geyBuZXh0UGFnZTogJycgfTtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViX3VybCA9IG9ic191cmwgKyBgJnBhZ2U9JHtwYWdlfWBcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJfY29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc3ViX3VybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b2tlbic6IHRoaXMuY29uZmlnLnRva2VuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Yl9yZXNwb25zZTogQXhpb3NSZXNwb25zZSA9IGF3YWl0IGF4aW9zKHN1Yl9jb25maWcpLmNhdGNoKGVyciA9PiBQcm9taXNlLnJlamVjdChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLnN0YXR1cyA8IDUwMCA/IG5ldyBXZWJTZXJ2aWNlRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEpIDogZXJyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHN1Yl9yZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic19yZXNwb25zZS5kYXRhLml0ZW1zLnB1c2guYXBwbHkob2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXMsIHN1Yl9yZXNwb25zZS5kYXRhLml0ZW1zKVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7IG5ldyBXZWJTZXJ2aWNlRXJyb3IoJ3BhZ2luYXRpb24gZXJyb3InKSB9XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKGxhc3RSZXN1bHQubmV4dFBhZ2UgIT09IG51bGwgJiYgb2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXMgPCA1MDAwKVxyXG4gICAgICAgICAgICBpZiAobGFzdFJlc3VsdC5uZXh0UGFnZSAhPT0gbnVsbCB8fCBsYXN0UmVzdWx0Lm5leHRQYWdlICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdHJ1bmNhdGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgb2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXMubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgbGV0IHBsYWluX2Fzc2V0ID0gb2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0uc29mdHdhcmUubWF0Y2goL2JpdGNvaW58ZXRoZXJldW0vKVxyXG4gICAgICAgICAgICBsZXQgYXNzZXQ6IFN0cmluZyA9ICcnXHJcbiAgICAgICAgICAgIGlmIChwbGFpbl9hc3NldCA9PSAnYml0Y29pbicpIHtcclxuICAgICAgICAgICAgICAgIGFzc2V0ID0gJ0JUQydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGxhaW5fYXNzZXQgPT0gJ2V0aGVyZXVtJykge1xyXG4gICAgICAgICAgICAgICAgYXNzZXQgPSAnRVRIJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBkZW5vcm1BZGRyZXNzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBkZW5vcm1BZGRyZXNzLnB1c2goYCR7YXNzZXR9OiR7b2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0ud2FsbGV0Um9vdEFkZHJlc3N9YClcclxuICAgICAgICAgICAgZGVub3JtQWRkcmVzcy5wdXNoKGAke2Fzc2V0fToke29ic19yZXNwb25zZS5kYXRhLml0ZW1zW3ldLnJvb3RBZGRyZXNzfWApXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0sIHtcclxuICAgICAgICAgICAgICAgIHNpcmVuRGVub3JtQWRkcmVzczogKFsuLi4gbmV3IFNldChkZW5vcm1BZGRyZXNzKV0pLFxyXG4gICAgICAgICAgICAgICAgaWQ6IG9ic19yZXNwb25zZS5kYXRhLml0ZW1zW3ldLmlwQWRkcmVzcyArICc6JyArIG9ic19yZXNwb25zZS5kYXRhLml0ZW1zW3ldLnRpbWVzdGFtcCxcclxuICAgICAgICAgICAgICAgIGFkZHJlc3M6IG9ic19yZXNwb25zZS5kYXRhLml0ZW1zW3ldLndhbGxldFJvb3RBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgcm9vdEFkZHJlc3M6IG9ic19yZXNwb25zZS5kYXRhLnJvb3RBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgZ2VvX2xvY2F0aW9uOiBvYnNfcmVzcG9uc2UuZGF0YS5pdGVtc1t5XS5sYXQgKyAnLCcgKyBvYnNfcmVzcG9uc2UuZGF0YS5pdGVtc1t5XS5sb25nXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG9ic2VydmF0aW9uOiBvYnNfcmVzcG9uc2UuZGF0YS5pdGVtc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=
