"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = require("joi");
const semver_1 = require("semver");
/**
 * Registers a list of services under a service group name.
 */
function registerServices(serviceGroup, Services, configSchema = {}) {
    return (kibana) => new kibana.Plugin({
        id: `web_services.${serviceGroup}`,
        require: ['kibana', 'elasticsearch', 'investigate_core'],
        config: (Joi) => Joi.object({ enabled: Joi.boolean().default(true), config: Joi.object().default({}) }).unknown().default(),
        preInit: function (server) {
            const webServicesEnabledGlobally = server.config().has('web_services.global') && server.config().get('web_services.global.enabled');
            if (webServicesEnabledGlobally) {
                this.requiredIds.push('web_service_manager');
            }
        },
        init: function (server) {
            return __awaiter(this, void 0, void 0, function* () {
                if (server.config().get('web_services.global.enabled')) {
                    try {
                        verifyInterfaceVersion(serviceGroup, server);
                        const groupConfig = getServiceGroupConfig(server, configSchema, serviceGroup);
                        yield server.plugins.web_service_manager.registerServices(serviceGroup, Services.map(Class => new Class(groupConfig)));
                        this.status.green('Ready');
                    }
                    catch (error) {
                        this.status.red('Failed to start up: ' + error.message);
                    }
                }
            });
        }
    });
}
exports.registerServices = registerServices;
function getServiceGroupConfig(server, schema, serviceGroup) {
    const config = server.config().get(`web_services.${serviceGroup}`).config;
    const requiredKeys = Object.keys(schema).filter((key) => schema[key]._flags.presence === 'required');
    const providedKeys = Object.keys(config);
    const missingKeys = requiredKeys.filter(key => !providedKeys.includes(key));
    if (missingKeys.length) {
        throw new Error(`The following required keys are missing in the config under 'web_services.${serviceGroup}.config': ${missingKeys.join(', ')}`);
    }
    const { error, value } = joi_1.object(schema).validate(config);
    if (error) {
        const { path, message } = error.details[0];
        const parentPath = path.substr(0, path.lastIndexOf('.'));
        throw new Error(`The configuration provided under 'web_services.${serviceGroup}.config.${parentPath}' is invalid: ${message}`);
    }
    return value;
}
function verifyInterfaceVersion(serviceGroup, server) {
    const thisVersion = require('../package.json').version;
    const investigatesInterfaceVersion = server.plugins.web_service_manager.interfaceVersion;
    if (!investigatesInterfaceVersion || semver_1.major(thisVersion) !== semver_1.major(investigatesInterfaceVersion) || semver_1.minor(thisVersion) !== semver_1.minor(investigatesInterfaceVersion)) {
        throw new Error(`Web service group '${serviceGroup}' could not be registered: plugin uses web-service-interface version ${thisVersion} when Investigate ` +
            `requires ${investigatesInterfaceVersion || 'a version below 0.7.0'}. Please change the version of this dependency in the package.json ` +
            `to ${investigatesInterfaceVersion || '0.6.0'}`);
    }
}
