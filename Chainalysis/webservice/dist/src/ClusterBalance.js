"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
const cryptoRegexPatterns = {
    'BTC': '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
    'ETH': '^(?:0x)?[a-fA-F0-9]{40,42}$',
    'USDT': '^1[1-9][a-zA-Z0-9]{24,33}$',
    'XRP': '^r[0-9a-zA-Z]{24,34}$',
    'BNB': '^bnb[0-9a-zA-Z]{38}$',
    'ADA': '^Ae2tdPwUPEYy{44}$',
    'SOL': '^So[1-9][0-9a-zA-Z]{48}$',
    'DOGE': '^D[0-9a-fA-F]{32}$',
    'TRX': '^T[0-9a-fA-F]{33}$',
    'LTC': '^L[a-km-zA-HJ-NP-Z1-9]{26,33}$',
    'DOT': '^1[a-zA-Z0-9]{31}$',
    'LINK': '^0x[a-fA-F0-9]{40}$',
    'XLM': '^G[A-Z0-9]{55}$',
    'XMR': '^4[0-9A-Za-z]{94}$',
    'ATOM': '^cosmos1[a-z0-9]{38}$',
};
class ClusterBalance extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'cluster_balance';
        this.inputSchema = {
            address: { type: 'text', required: true },
            asset: { type: 'text', required: false },
            outputAsset: { type: 'text', required: false },
        };
        this.outputConfiguration = {
            balance: {
                'addressCount': 'long',
                'transferCount': 'long',
                'depositCount': 'long',
                'withdrawalCount': 'long',
                'balance': 'long',
                'totalSentAmount': 'long',
                'totalReceivedAmount': 'long',
                'totalFeesAmount': 'long'
            }
        };
    }
    inferAssetType(address) {
        return Object.keys(cryptoRegexPatterns).filter(asset => {
            return new RegExp(cryptoRegexPatterns[asset]).test(address);
        });
    }
    async invoke(inputs) {
        let matchedAssets = inputs.asset ? [inputs.asset] : this.inferAssetType(inputs.address);
        let overallResults = []; // define overallResults as array of 'any' type
        for (const asset of matchedAssets) {
            let url = `https://iapi.chainalysis.com/clusters/${inputs.address}/${asset}/summary?outputAsset=${inputs.outputAsset}`;
            const config = {
                method: 'get',
                url: url,
                headers: {
                    'Accept': 'application/json',
                    'token': this.config.token
                }
            };
            const response = await axios_1.default(config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
            const denormAddress = [];
            denormAddress.push(`${response.data.asset}:${response.data.address}`);
            denormAddress.push(`${response.data.asset}:${response.data.rootAddress}`);
            Object.assign(response.data, {
                sirenDenormAddress: denormAddress,
                id: `${response.data.asset}:${response.data.address}`
            });
            overallResults.push(response.data);
        }
        return {
            balance: overallResults
        };
    }
}
exports.default = ClusterBalance;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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R0FBRyxDQUFDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksdUNBQWUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNLLE1BQU0sYUFBYSxHQUFhLEVBQUUsQ0FBQztZQUNuQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3RFLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDMUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO2dCQUMzQixrQkFBa0IsRUFBRSxhQUFhO2dCQUNqQyxFQUFFLEVBQUUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTthQUN0RCxDQUFDLENBQUM7WUFDSCxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU87WUFDTCxPQUFPLEVBQUUsY0FBYztTQUN4QixDQUFBO0lBQ0gsQ0FBQztDQUNGO0FBMURELGlDQTBEQyIsImZpbGUiOiJzcmMvQ2x1c3RlckJhbGFuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhSW5kZXhSZXN1bHRzLCBJbnB1dFNjaGVtYSwgT3V0cHV0Q29uZmlndXJhdGlvbiwgU2VydmljZURlZmluaXRpb24sIFdlYlNlcnZpY2VFcnJvciB9IGZyb20gJ0BzaXJlbnNvbHV0aW9ucy93ZWItc2VydmljZS1pbnRlcmZhY2UnO1xyXG5pbXBvcnQgYXhpb3MsIHsgQXhpb3NSZXF1ZXN0Q29uZmlnLCBBeGlvc1Jlc3BvbnNlIH0gZnJvbSAnYXhpb3MnO1xyXG5cclxuY29uc3QgY3J5cHRvUmVnZXhQYXR0ZXJucyA9IHtcclxuICAnQlRDJzogJ14oYmMxfFsxM10pW2EtekEtSEotTlAtWjAtOV17MjUsMzl9JCcsIC8vIEJpdGNvaW4gKEJUQykgaW5jbHVkaW5nIGJlY2gzMiBhZGRyZXNzZXNcclxuICAnRVRIJzogJ14oPzoweCk/W2EtZkEtRjAtOV17NDAsNDJ9JCcsIC8vIEV0aGVyZXVtXHJcbiAgJ1VTRFQnOiAnXjFbMS05XVthLXpBLVowLTldezI0LDMzfSQnLCAvLyBUZXRoZXJcclxuICAnWFJQJzogJ15yWzAtOWEtekEtWl17MjQsMzR9JCcsIC8vIFJpcHBsZVxyXG4gICdCTkInOiAnXmJuYlswLTlhLXpBLVpdezM4fSQnLCAvLyBCaW5hbmNlIENvaW5cclxuICAnQURBJzogJ15BZTJ0ZFB3VVBFWXl7NDR9JCcsIC8vIENhcmRhbm9cclxuICAnU09MJzogJ15Tb1sxLTldWzAtOWEtekEtWl17NDh9JCcsIC8vIFNvbGFuYVxyXG4gICdET0dFJzogJ15EWzAtOWEtZkEtRl17MzJ9JCcsIC8vIERvZ2Vjb2luXHJcbiAgJ1RSWCc6ICdeVFswLTlhLWZBLUZdezMzfSQnLCAvLyBUcm9uXHJcbiAgJ0xUQyc6ICdeTFthLWttLXpBLUhKLU5QLVoxLTldezI2LDMzfSQnLCAvLyBMaXRlY29pblxyXG4gICdET1QnOiAnXjFbYS16QS1aMC05XXszMX0kJywgLy8gUG9sa2Fkb3RcclxuICAnTElOSyc6ICdeMHhbYS1mQS1GMC05XXs0MH0kJywgLy8gQ2hhaW5saW5rXHJcbiAgJ1hMTSc6ICdeR1tBLVowLTldezU1fSQnLCAvLyBTdGVsbGFyIEx1bWVuc1xyXG4gICdYTVInOiAnXjRbMC05QS1aYS16XXs5NH0kJywgLy8gTW9uZXJvXHJcbiAgJ0FUT00nOiAnXmNvc21vczFbYS16MC05XXszOH0kJywgLy8gQ29zbW9zXHJcbiAgLy8gQWRkIG1vcmUgcGF0dGVybnMgaGVyZSBmb3Igb3RoZXIgY3J5cHRvY3VycmVuY2llc1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2x1c3RlckJhbGFuY2UgZXh0ZW5kcyBTZXJ2aWNlRGVmaW5pdGlvbiB7XHJcbiAgcmVhZG9ubHkgbmFtZSA9ICdjbHVzdGVyX2JhbGFuY2UnO1xyXG4gIHJlYWRvbmx5IGlucHV0U2NoZW1hOiBJbnB1dFNjaGVtYSA9IHtcclxuICAgIGFkZHJlc3M6IHsgdHlwZTogJ3RleHQnLCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gICAgYXNzZXQ6IHsgdHlwZTogJ3RleHQnLCByZXF1aXJlZDogZmFsc2UgfSxcclxuICAgIG91dHB1dEFzc2V0OiB7IHR5cGU6ICd0ZXh0JywgcmVxdWlyZWQ6IGZhbHNlIH0sXHJcbiAgfTtcclxuICByZWFkb25seSBvdXRwdXRDb25maWd1cmF0aW9uOiBPdXRwdXRDb25maWd1cmF0aW9uID0ge1xyXG4gICAgYmFsYW5jZToge1xyXG4gICAgICAnYWRkcmVzc0NvdW50JzogJ2xvbmcnLFxyXG4gICAgICAndHJhbnNmZXJDb3VudCc6ICdsb25nJyxcclxuICAgICAgJ2RlcG9zaXRDb3VudCc6ICdsb25nJyxcclxuICAgICAgJ3dpdGhkcmF3YWxDb3VudCc6ICdsb25nJyxcclxuICAgICAgJ2JhbGFuY2UnOiAnbG9uZycsXHJcbiAgICAgICd0b3RhbFNlbnRBbW91bnQnOiAnbG9uZycsXHJcbiAgICAgICd0b3RhbFJlY2VpdmVkQW1vdW50JzogJ2xvbmcnLFxyXG4gICAgICAndG90YWxGZWVzQW1vdW50JzogJ2xvbmcnXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBpbmZlckFzc2V0VHlwZShhZGRyZXNzOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoY3J5cHRvUmVnZXhQYXR0ZXJucykuZmlsdGVyKGFzc2V0ID0+IHtcclxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoY3J5cHRvUmVnZXhQYXR0ZXJuc1thc3NldF0pLnRlc3QoYWRkcmVzcyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGludm9rZShpbnB1dHM6IHtcclxuICAgIGFkZHJlc3M6IHN0cmluZyxcclxuICAgIGFzc2V0Pzogc3RyaW5nLFxyXG4gICAgb3V0cHV0QXNzZXQ/OiBzdHJpbmcsXHJcbiAgfSk6IFByb21pc2U8RGF0YUluZGV4UmVzdWx0cz4ge1xyXG4gICAgbGV0IG1hdGNoZWRBc3NldHMgPSBpbnB1dHMuYXNzZXQgPyBbaW5wdXRzLmFzc2V0XSA6IHRoaXMuaW5mZXJBc3NldFR5cGUoaW5wdXRzLmFkZHJlc3MpO1xyXG4gICAgbGV0IG92ZXJhbGxSZXN1bHRzOiBhbnlbXSA9IFtdOyAvLyBkZWZpbmUgb3ZlcmFsbFJlc3VsdHMgYXMgYXJyYXkgb2YgJ2FueScgdHlwZVxyXG5cclxuICAgIGZvciAoY29uc3QgYXNzZXQgb2YgbWF0Y2hlZEFzc2V0cykge1xyXG4gICAgICBsZXQgdXJsID0gYGh0dHBzOi8vaWFwaS5jaGFpbmFseXNpcy5jb20vY2x1c3RlcnMvJHtpbnB1dHMuYWRkcmVzc30vJHthc3NldH0vc3VtbWFyeT9vdXRwdXRBc3NldD0ke2lucHV0cy5vdXRwdXRBc3NldH1gO1xyXG4gICAgICBjb25zdCBjb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcclxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxyXG4gICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAndG9rZW4nOiB0aGlzLmNvbmZpZy50b2tlblxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgY29uc3QgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSBhd2FpdCBheGlvcyhjb25maWcpLmNhdGNoKGVyciA9PiBQcm9taXNlLnJlamVjdChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLnN0YXR1cyA8IDUwMCA/IG5ldyBXZWJTZXJ2aWNlRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEpIDogZXJyKSk7XHJcbiAgICAgIGNvbnN0IGRlbm9ybUFkZHJlc3M6IHN0cmluZ1tdID0gW107XHJcbiAgICAgIGRlbm9ybUFkZHJlc3MucHVzaChgJHtyZXNwb25zZS5kYXRhLmFzc2V0fToke3Jlc3BvbnNlLmRhdGEuYWRkcmVzc31gKTtcclxuICAgICAgZGVub3JtQWRkcmVzcy5wdXNoKGAke3Jlc3BvbnNlLmRhdGEuYXNzZXR9OiR7cmVzcG9uc2UuZGF0YS5yb290QWRkcmVzc31gKTtcclxuICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zZS5kYXRhLCB7XHJcbiAgICAgICAgc2lyZW5EZW5vcm1BZGRyZXNzOiBkZW5vcm1BZGRyZXNzLFxyXG4gICAgICAgIGlkOiBgJHtyZXNwb25zZS5kYXRhLmFzc2V0fToke3Jlc3BvbnNlLmRhdGEuYWRkcmVzc31gXHJcbiAgICAgIH0pO1xyXG4gICAgICBvdmVyYWxsUmVzdWx0cy5wdXNoKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYmFsYW5jZTogb3ZlcmFsbFJlc3VsdHNcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19
