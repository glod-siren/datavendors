"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
const cryptoRegexPatterns = {
    'BTC': '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
    'ETH': '^(?:0x)?[a-fA-F0-9]{40,42}$',
    'USDT': '^1[1-9][a-zA-Z0-9]{24,33}$',
    'XRP': '^r[0-9a-zA-Z]{24,34}$',
    'BNB': '^bnb[0-9a-zA-Z]{38}$',
    'ADA': '^Ae2tdPwUPEYy{44}$',
    'SOL': '^So[1-9][0-9a-zA-Z]{48}$',
    'DOGE': '^D[0-9a-fA-F]{32}$',
    'TRX': '^T[0-9a-fA-F]{33}$',
    'LTC': '^L[a-km-zA-HJ-NP-Z1-9]{26,33}$',
    'DOT': '^1[a-zA-Z0-9]{31}$',
    'LINK': '^0x[a-fA-F0-9]{40}$',
    'XLM': '^G[A-Z0-9]{55}$',
    'XMR': '^4[0-9A-Za-z]{94}$',
    'ATOM': '^cosmos1[a-z0-9]{38}$',
};
class ClusterExposure extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'cluster_exposure';
        this.inputSchema = {
            address: { type: 'text', required: true },
            asset: { type: 'text', required: false },
            outputAsset: { type: 'text', required: false },
        };
        this.outputConfiguration = {
            exposure: {
                'percentage': 'long',
                'value': 'long'
            }
        };
    }
    inferAssetType(address) {
        return Object.keys(cryptoRegexPatterns).filter(asset => {
            return new RegExp(cryptoRegexPatterns[asset]).test(address);
        });
    }
    async invoke(inputs) {
        let matchedAssets = inputs.asset ? [inputs.asset] : this.inferAssetType(inputs.address);
        let overallExposure = [];
        for (const asset of matchedAssets) {
            const exposure_paths = ['SENDING', 'RECEIVING', 'SENDING/services', 'RECEIVING/services'];
            let exposure = [];
            for (let z = 0; z < exposure_paths.length; z++) {
                let exposure_url = `https://iapi.chainalysis.com/exposures/clusters/${inputs.address}/${asset}/directions/${exposure_paths[z]}?outputAsset=${inputs.outputAsset}`;
                let exposure_config = {
                    method: 'get',
                    url: exposure_url,
                    headers: {
                        'Accept': 'application/json',
                        'token': this.config.token
                    }
                };
                let exposure_response = await axios_1.default(exposure_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
                try {
                    for (let b = 0; exposure_response.data.indirectExposure.services && b < exposure_response.data.indirectExposure.services.length; b++) {
                        Object.assign(exposure_response.data.indirectExposure.services[b], {
                            type: 'Service',
                            exposure: 'indirectExposure',
                            direction: exposure_paths[z],
                            outputAsset: exposure_response.data.outputAsset,
                            asset: exposure_response.data.asset,
                            inputAddress: exposure_response.data.rootAddress,
                            id: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}:indirectExposure:${exposure_paths[z]}:${exposure_response.data.indirectExposure.services[b].rootAddress}`,
                            sirenDenormRootAddress: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}`,
                            sirenDenormExposureAddress: `${exposure_response.data.asset}:${exposure_response.data.indirectExposure.services[b].rootAddress}`,
                        });
                        exposure.push(exposure_response.data.indirectExposure.services[b]);
                    }
                }
                catch { }
                try {
                    for (let b = 0; exposure_response.data.directExposure.services && b < exposure_response.data.directExposure.services.length; b++) {
                        Object.assign(exposure_response.data.directExposure.services[b], {
                            type: 'Service',
                            exposure: 'directExposure',
                            direction: exposure_paths[z],
                            outputAsset: exposure_response.data.outputAsset,
                            asset: exposure_response.data.asset,
                            inputAddress: exposure_response.data.rootAddress,
                            id: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}:directExposure:${exposure_paths[z]}:${exposure_response.data.directExposure.services[b].rootAddress}`,
                            sirenDenormRootAddress: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}`,
                            sirenDenormExposureAddress: `${exposure_response.data.asset}:${exposure_response.data.directExposure.services[b].rootAddress}`,
                        });
                        exposure.push(exposure_response.data.directExposure.services[b]);
                    }
                }
                catch { }
                try {
                    for (let b = 0; exposure_response.data.indirectExposure.categories && b < exposure_response.data.indirectExposure.categories.length; b++) {
                        Object.assign(exposure_response.data.indirectExposure.categories[b], {
                            type: 'Category',
                            exposure: 'indirectExposure',
                            direction: exposure_paths[z],
                            outputAsset: exposure_response.data.outputAsset,
                            asset: exposure_response.data.asset,
                            inputAddress: exposure_response.data.rootAddress,
                            id: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}:indirectExposure:${exposure_paths[z]}:${exposure_response.data.indirectExposure.categories[b].category}`,
                            sirenDenormRootAddress: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}`
                        });
                        exposure.push(exposure_response.data.indirectExposure.categories[b]);
                    }
                }
                catch { }
                try {
                    for (let b = 0; exposure_response.data.directExposure.categories && b < exposure_response.data.directExposure.categories.length; b++) {
                        Object.assign(exposure_response.data.directExposure.categories[b], {
                            type: 'Category',
                            exposure: 'directExposure',
                            direction: exposure_paths[z],
                            outputAsset: exposure_response.data.outputAsset,
                            asset: exposure_response.data.asset,
                            inputAddress: exposure_response.data.rootAddress,
                            id: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}:directExposure:${exposure_paths[z]}:${exposure_response.data.directExposure.categories[b].category}`,
                            sirenDenormRootAddress: `${exposure_response.data.asset}:${exposure_response.data.rootAddress}`,
                        });
                        exposure.push(exposure_response.data.directExposure.categories[b]);
                    }
                }
                catch { }
            }
            overallExposure.push(...exposure);
        }
        return {
            exposure: overallExposure
        };
    }
}
exports.default = ClusterExposure;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
