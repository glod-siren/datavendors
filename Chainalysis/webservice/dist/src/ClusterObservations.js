"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
const cryptoRegexPatterns = {
    'BTC': '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
    'ETH': '^(?:0x)?[a-fA-F0-9]{40,42}$',
    'XRP': '^r[0-9a-zA-Z]{24,34}$',
    'BNB': '^bnb[0-9a-zA-Z]{38}$',
    'ADA': '^Ae2tdPwUPEYy{44}$',
    'SOL': '^So[1-9][0-9a-zA-Z]{48}$',
    'DOGE': '^D[0-9a-fA-F]{32}$',
    'TRX': '^T[0-9a-fA-F]{33}$',
    'LTC': '^L[a-km-zA-HJ-NP-Z1-9]{26,33}$',
    'DOT': '^1[a-zA-Z0-9]{31}$',
    'LINK': '^0x[a-fA-F0-9]{40}$',
    'XLM': '^G[A-Z0-9]{55}$',
    'XMR': '^4[0-9A-Za-z]{94}$',
    'ATOM': '^cosmos1[a-z0-9]{38}$',
};
class ClusterObservations extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'cluster_observations';
        this.inputSchema = {
            address: { type: 'text', required: true },
            asset: { type: 'text', required: false },
            startTime: { type: 'date', required: false },
            endTime: { type: 'date', required: false }
        };
        this.outputConfiguration = {
            observation: {
                'lat': 'long',
                'long': 'long',
                'timestamp': 'date',
                'geo_location': 'geo_point',
                'ipAddress': 'keyword',
                'port': 'keyword'
            }
        };
    }
    inferAssetType(address) {
        return Object.keys(cryptoRegexPatterns).filter(asset => {
            return new RegExp(cryptoRegexPatterns[asset]).test(address);
        });
    }
    async invoke(inputs) {
        const matchedAssets = inputs.asset ? [inputs.asset] : this.inferAssetType(inputs.address);
        let overallResults = [];
        for (const asset of matchedAssets) {
            let obs_url = `https://iapi.chainalysis.com/observations/clusters/${inputs.address}/${asset}?`;
            if (inputs.startTime) {
                obs_url = obs_url + `&startTime=${inputs.startTime}`;
            }
            if (inputs.endTime) {
                obs_url = obs_url + `&endTime=${inputs.endTime}`;
            }
            const obs_config = {
                method: 'get',
                url: obs_url,
                headers: {
                    'Accept': 'application/json',
                    'token': this.config.token
                }
            };
            const obs_response = await axios_1.default(obs_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
            for (let y = 0; y < obs_response.data.observations.length; y++) {
                let denormAddress = [];
                denormAddress.push(`${asset}:${obs_response.data.observations[y].walletRootAddress}`);
                denormAddress.push(`${asset}:${obs_response.data.address}`);
                denormAddress.push(`${asset}:${obs_response.data.rootAddress}`);
                Object.assign(obs_response.data.observations[y], {
                    sirenDenormAddress: ([...new Set(denormAddress)]),
                    id: obs_response.data.observations[y].walletRootAddress + ':' + obs_response.data.observations[y].timestamp,
                    address: obs_response.data.observations[y].walletRootAddress,
                    rootAddress: obs_response.data.rootAddress,
                    geo_location: obs_response.data.observations[y].lat + ',' + obs_response.data.observations[y].long
                });
                overallResults.push(obs_response.data.observations[y]);
            }
        }
        return {
            observation: overallResults
        };
    }
}
exports.default = ClusterObservations;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
