"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
const cryptoRegexPatterns = {
    'BTC': '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
    'ETH': '^(?:0x)?[a-fA-F0-9]{40,42}$',
    'USDT': '^1[1-9][a-zA-Z0-9]{24,33}$',
    'XRP': '^r[0-9a-zA-Z]{24,34}$',
    'BNB': '^bnb[0-9a-zA-Z]{38}$',
    'ADA': '^Ae2tdPwUPEYy{44}$',
    'SOL': '^So[1-9][0-9a-zA-Z]{48}$',
    'DOGE': '^D[0-9a-fA-F]{32}$',
    'TRX': '^T[0-9a-fA-F]{33}$',
    'LTC': '^L[a-km-zA-HJ-NP-Z1-9]{26,33}$',
    'DOT': '^1[a-zA-Z0-9]{31}$',
    'LINK': '^0x[a-fA-F0-9]{40}$',
    'XLM': '^G[A-Z0-9]{55}$',
    'XMR': '^4[0-9A-Za-z]{94}$',
    'ATOM': '^cosmos1[a-z0-9]{38}$',
};
class IpObservations extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'ip_observations';
        this.inputSchema = {
            ip: { type: 'text', required: true },
            startTime: { type: 'date', required: false },
            endTime: { type: 'date', required: false },
            page: { type: 'date', required: false },
            page_limit: { type: 'float', required: false },
        };
        this.outputConfiguration = {
            observation: {
                'lat': 'long',
                'long': 'long',
                'timestamp': 'date',
                'geo_location': 'geo_point',
                'ipAddress': 'keyword',
                'port': 'keyword',
                'asset': 'keyword'
            },
            pagination: {
                'nextPage': 'keyword',
                'totalresults': 'long'
            }
        };
    }
    async invoke(inputs) {
        let obs_url = `https://iapi.chainalysis.com/observations/ips/${inputs.ip}?size=100`;
        if (inputs.page) {
            obs_url = obs_url + `&page=${inputs.page}`;
        }
        if (inputs.startTime) {
            obs_url = obs_url + `&startTime=${inputs.startTime}`;
        }
        if (inputs.endTime) {
            obs_url = obs_url + `&endTime=${inputs.endTime}`;
        }
        const obs_config = {
            method: 'get',
            url: obs_url,
            headers: {
                'Accept': 'application/json',
                'token': this.config.token
            }
        };
        const obs_response = await axios_1.default(obs_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
        let truncated = false;
        let nextPage = '';
        if (obs_response.data.nextPage != null) {
            let page = obs_response.data.nextPage;
            let lastResult = { nextPage: '' };
            const page_limit = inputs.page_limit ? inputs.page_limit : Number.MAX_SAFE_INTEGER;
            let pagesFetched = 0;
            do {
                try {
                    let sub_url = `https://iapi.chainalysis.com/observations/ips/${inputs.ip}?size=100` + `&page=${page}`;
                    const sub_config = {
                        method: 'get',
                        url: sub_url,
                        headers: {
                            'Accept': 'application/json',
                            'token': this.config.token
                        }
                    };
                    const sub_response = await axios_1.default(sub_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
                    lastResult = sub_response.data;
                    obs_response.data.items.push.apply(obs_response.data.items, sub_response.data.items);
                    page = lastResult.nextPage;
                    pagesFetched += 1;
                }
                catch {
                    new web_service_interface_1.WebServiceError('pagination error');
                }
            } while (lastResult.nextPage !== null && pagesFetched < page_limit);
            if (lastResult.nextPage !== null) {
                truncated = true;
                nextPage = lastResult.nextPage;
            }
        }
        for (let y = 0; y < obs_response.data.items.length; y++) {
            let asset = '';
            for (const cryptoType in cryptoRegexPatterns) {
                const regexPattern = new RegExp(cryptoRegexPatterns[cryptoType]);
                if (regexPattern.test(obs_response.data.items[y].walletRootAddress)) {
                    asset = cryptoType;
                    break;
                }
            }
            Object.assign(obs_response.data.items[y], {
                id: obs_response.data.items[y].ipAddress + ':' + obs_response.data.items[y].timestamp,
                address: obs_response.data.items[y].walletRootAddress,
                geo_location: obs_response.data.items[y].lat + ',' + obs_response.data.items[y].long,
                asset: asset
            });
        }
        return {
            observation: obs_response.data.items,
            pagination: [{
                    totalresults: obs_response.data.length,
                    nextPage: nextPage
                }]
        };
    }
}
exports.default = IpObservations;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7b0JBQ25CLE1BQU07aUJBQ1Q7YUFDSjtZQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RDLEVBQUUsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQ3JGLE9BQU8sRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7Z0JBQ3JELFlBQVksRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQ3BGLEtBQUssRUFBRSxLQUFLO2FBQ2YsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPO1lBQ0gsV0FBVyxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNwQyxVQUFVLEVBQUUsQ0FBQztvQkFDVCxZQUFZLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNO29CQUN0QyxRQUFRLEVBQUUsUUFBUTtpQkFDckIsQ0FBQztTQUNMLENBQUE7SUFDTCxDQUFDO0NBQ0o7QUF4R0QsaUNBd0dDIiwiZmlsZSI6InNyYy9JcE9ic2VydmF0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFJbmRleFJlc3VsdHMsIElucHV0U2NoZW1hLCBPdXRwdXRDb25maWd1cmF0aW9uLCBTZXJ2aWNlRGVmaW5pdGlvbiwgV2ViU2VydmljZUVycm9yIH0gZnJvbSAnQHNpcmVuc29sdXRpb25zL3dlYi1zZXJ2aWNlLWludGVyZmFjZSc7XHJcbmltcG9ydCBheGlvcywgeyBBeGlvc1JlcXVlc3RDb25maWcsIEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcyc7XHJcblxyXG5jb25zdCBjcnlwdG9SZWdleFBhdHRlcm5zID0ge1xyXG4gICAgJ0JUQyc6ICdeKGJjMXxbMTNdKVthLXpBLUhKLU5QLVowLTldezI1LDM5fSQnLCAvLyBCaXRjb2luIChCVEMpIGluY2x1ZGluZyBiZWNoMzIgYWRkcmVzc2VzXHJcbiAgICAnRVRIJzogJ14oPzoweCk/W2EtZkEtRjAtOV17NDAsNDJ9JCcsIC8vIEV0aGVyZXVtXHJcbiAgICAnVVNEVCc6ICdeMVsxLTldW2EtekEtWjAtOV17MjQsMzN9JCcsIC8vIFRldGhlclxyXG4gICAgJ1hSUCc6ICdeclswLTlhLXpBLVpdezI0LDM0fSQnLCAvLyBSaXBwbGVcclxuICAgICdCTkInOiAnXmJuYlswLTlhLXpBLVpdezM4fSQnLCAvLyBCaW5hbmNlIENvaW5cclxuICAgICdBREEnOiAnXkFlMnRkUHdVUEVZeXs0NH0kJywgLy8gQ2FyZGFub1xyXG4gICAgJ1NPTCc6ICdeU29bMS05XVswLTlhLXpBLVpdezQ4fSQnLCAvLyBTb2xhbmFcclxuICAgICdET0dFJzogJ15EWzAtOWEtZkEtRl17MzJ9JCcsIC8vIERvZ2Vjb2luXHJcbiAgICAnVFJYJzogJ15UWzAtOWEtZkEtRl17MzN9JCcsIC8vIFRyb25cclxuICAgICdMVEMnOiAnXkxbYS1rbS16QS1ISi1OUC1aMS05XXsyNiwzM30kJywgLy8gTGl0ZWNvaW5cclxuICAgICdET1QnOiAnXjFbYS16QS1aMC05XXszMX0kJywgLy8gUG9sa2Fkb3RcclxuICAgICdMSU5LJzogJ14weFthLWZBLUYwLTldezQwfSQnLCAvLyBDaGFpbmxpbmtcclxuICAgICdYTE0nOiAnXkdbQS1aMC05XXs1NX0kJywgLy8gU3RlbGxhciBMdW1lbnNcclxuICAgICdYTVInOiAnXjRbMC05QS1aYS16XXs5NH0kJywgLy8gTW9uZXJvXHJcbiAgICAnQVRPTSc6ICdeY29zbW9zMVthLXowLTldezM4fSQnLCAvLyBDb3Ntb3NcclxuICAgIC8vIEFkZCBtb3JlIHBhdHRlcm5zIGhlcmUgZm9yIG90aGVyIGNyeXB0b2N1cnJlbmNpZXNcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElwT2JzZXJ2YXRpb25zIGV4dGVuZHMgU2VydmljZURlZmluaXRpb24ge1xyXG4gICAgcmVhZG9ubHkgbmFtZSA9ICdpcF9vYnNlcnZhdGlvbnMnO1xyXG4gICAgcmVhZG9ubHkgaW5wdXRTY2hlbWE6IElucHV0U2NoZW1hID0ge1xyXG4gICAgICAgIGlwOiB7IHR5cGU6ICd0ZXh0JywgcmVxdWlyZWQ6IHRydWUgfSxcclxuICAgICAgICBzdGFydFRpbWU6IHsgdHlwZTogJ2RhdGUnLCByZXF1aXJlZDogZmFsc2UgfSxcclxuICAgICAgICBlbmRUaW1lOiB7IHR5cGU6ICdkYXRlJywgcmVxdWlyZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgcGFnZTogeyB0eXBlOiAnZGF0ZScsIHJlcXVpcmVkOiBmYWxzZSB9LFxyXG4gICAgICAgIHBhZ2VfbGltaXQ6IHsgdHlwZTogJ2Zsb2F0JywgcmVxdWlyZWQ6IGZhbHNlIH0sXHJcbiAgICB9O1xyXG4gICAgcmVhZG9ubHkgb3V0cHV0Q29uZmlndXJhdGlvbjogT3V0cHV0Q29uZmlndXJhdGlvbiA9IHtcclxuICAgICAgICBvYnNlcnZhdGlvbjoge1xyXG4gICAgICAgICAgICAnbGF0JyA6ICdsb25nJyxcclxuICAgICAgICAgICAgJ2xvbmcnOiAnbG9uZycsXHJcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiAnZGF0ZScsXHJcbiAgICAgICAgICAgICdnZW9fbG9jYXRpb24nOiAnZ2VvX3BvaW50JyxcclxuICAgICAgICAgICAgJ2lwQWRkcmVzcyc6ICdrZXl3b3JkJyxcclxuICAgICAgICAgICAgJ3BvcnQnOiAna2V5d29yZCcsXHJcbiAgICAgICAgICAgICdhc3NldCc6ICdrZXl3b3JkJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgICAnbmV4dFBhZ2UnOiAna2V5d29yZCcsXHJcbiAgICAgICAgICAgICd0b3RhbHJlc3VsdHMnOiAnbG9uZydcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYXN5bmMgaW52b2tlKGlucHV0czoge1xyXG4gICAgICAgIGlwOiBzdHJpbmcsXHJcbiAgICAgICAgc3RhcnRUaW1lOiBzdHJpbmcsXHJcbiAgICAgICAgZW5kVGltZTogc3RyaW5nLFxyXG4gICAgICAgIHBhZ2U6IHN0cmluZyxcclxuICAgICAgICBwYWdlX2xpbWl0PzogbnVtYmVyLFxyXG4gICAgfSk6IFByb21pc2U8RGF0YUluZGV4UmVzdWx0cz4ge1xyXG4gICAgICAgIGxldCBvYnNfdXJsID0gYGh0dHBzOi8vaWFwaS5jaGFpbmFseXNpcy5jb20vb2JzZXJ2YXRpb25zL2lwcy8ke2lucHV0cy5pcH0/c2l6ZT0xMDBgO1xyXG4gICAgICAgIGlmIChpbnB1dHMucGFnZSkge1xyXG4gICAgICAgICAgICBvYnNfdXJsID0gb2JzX3VybCArIGAmcGFnZT0ke2lucHV0cy5wYWdlfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnB1dHMuc3RhcnRUaW1lKSB7XHJcbiAgICAgICAgICAgIG9ic191cmwgPSBvYnNfdXJsICsgYCZzdGFydFRpbWU9JHtpbnB1dHMuc3RhcnRUaW1lfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnB1dHMuZW5kVGltZSkge1xyXG4gICAgICAgICAgICBvYnNfdXJsID0gb2JzX3VybCArIGAmZW5kVGltZT0ke2lucHV0cy5lbmRUaW1lfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9ic19jb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcclxuICAgICAgICAgICAgdXJsOiBvYnNfdXJsLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAgICAgJ3Rva2VuJzogdGhpcy5jb25maWcudG9rZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgb2JzX3Jlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlID0gYXdhaXQgYXhpb3Mob2JzX2NvbmZpZykuY2F0Y2goZXJyID0+IFByb21pc2UucmVqZWN0KGVyci5yZXNwb25zZSAmJiBlcnIucmVzcG9uc2Uuc3RhdHVzIDwgNTAwID8gbmV3IFdlYlNlcnZpY2VFcnJvcihlcnIucmVzcG9uc2UuZGF0YSkgOiBlcnIpKTtcclxuICAgICAgICBsZXQgdHJ1bmNhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IG5leHRQYWdlID0gJyc7XHJcbiAgICAgICAgaWYgKG9ic19yZXNwb25zZS5kYXRhLm5leHRQYWdlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IHBhZ2UgPSBvYnNfcmVzcG9uc2UuZGF0YS5uZXh0UGFnZTtcclxuICAgICAgICAgICAgbGV0IGxhc3RSZXN1bHQgPSB7IG5leHRQYWdlOiAnJyB9O1xyXG4gICAgICAgICAgICBjb25zdCBwYWdlX2xpbWl0ID0gaW5wdXRzLnBhZ2VfbGltaXQgPyBpbnB1dHMucGFnZV9saW1pdCA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xyXG4gICAgICAgICAgICBsZXQgcGFnZXNGZXRjaGVkID0gMDtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3ViX3VybCA9IGBodHRwczovL2lhcGkuY2hhaW5hbHlzaXMuY29tL29ic2VydmF0aW9ucy9pcHMvJHtpbnB1dHMuaXB9P3NpemU9MTAwYCArIGAmcGFnZT0ke3BhZ2V9YDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJfY29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc3ViX3VybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0b2tlbic6IHRoaXMuY29uZmlnLnRva2VuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Yl9yZXNwb25zZTogQXhpb3NSZXNwb25zZSA9IGF3YWl0IGF4aW9zKHN1Yl9jb25maWcpLmNhdGNoKGVyciA9PiBQcm9taXNlLnJlamVjdChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLnN0YXR1cyA8IDUwMCA/IG5ldyBXZWJTZXJ2aWNlRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEpIDogZXJyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHN1Yl9yZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic19yZXNwb25zZS5kYXRhLml0ZW1zLnB1c2guYXBwbHkob2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXMsIHN1Yl9yZXNwb25zZS5kYXRhLml0ZW1zKTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlID0gbGFzdFJlc3VsdC5uZXh0UGFnZTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlc0ZldGNoZWQgKz0gMTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggeyBuZXcgV2ViU2VydmljZUVycm9yKCdwYWdpbmF0aW9uIGVycm9yJykgfVxyXG4gICAgICAgICAgICB9IHdoaWxlIChsYXN0UmVzdWx0Lm5leHRQYWdlICE9PSBudWxsICYmIHBhZ2VzRmV0Y2hlZCA8IHBhZ2VfbGltaXQpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAobGFzdFJlc3VsdC5uZXh0UGFnZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdHJ1bmNhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG5leHRQYWdlID0gbGFzdFJlc3VsdC5uZXh0UGFnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IG9ic19yZXNwb25zZS5kYXRhLml0ZW1zLmxlbmd0aDsgeSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBhc3NldDogU3RyaW5nID0gJydcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjcnlwdG9UeXBlIGluIGNyeXB0b1JlZ2V4UGF0dGVybnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4UGF0dGVybiA9IG5ldyBSZWdFeHAoY3J5cHRvUmVnZXhQYXR0ZXJuc1tjcnlwdG9UeXBlXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhQYXR0ZXJuLnRlc3Qob2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0ud2FsbGV0Um9vdEFkZHJlc3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzZXQgPSBjcnlwdG9UeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0sIHtcclxuICAgICAgICAgICAgICAgIGlkOiBvYnNfcmVzcG9uc2UuZGF0YS5pdGVtc1t5XS5pcEFkZHJlc3MgKyAnOicgKyBvYnNfcmVzcG9uc2UuZGF0YS5pdGVtc1t5XS50aW1lc3RhbXAsXHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBvYnNfcmVzcG9uc2UuZGF0YS5pdGVtc1t5XS53YWxsZXRSb290QWRkcmVzcyxcclxuICAgICAgICAgICAgICAgIGdlb19sb2NhdGlvbjogb2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0ubGF0ICsgJywnICsgb2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0ubG9uZyxcclxuICAgICAgICAgICAgICAgIGFzc2V0OiBhc3NldFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBvYnNlcnZhdGlvbjogb2JzX3Jlc3BvbnNlLmRhdGEuaXRlbXMsXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb246IFt7XHJcbiAgICAgICAgICAgICAgICB0b3RhbHJlc3VsdHM6IG9ic19yZXNwb25zZS5kYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG5leHRQYWdlOiBuZXh0UGFnZVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=
