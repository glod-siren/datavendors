"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
const cryptoRegexPatterns = {
    'BTC': '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
    'ETH': '^(?:0x)?[a-fA-F0-9]{40,42}$',
    'XRP': '^r[0-9a-zA-Z]{24,34}$',
    'BNB': '^bnb[0-9a-zA-Z]{38}$',
    'ADA': '^Ae2tdPwUPEYy{44}$',
    'SOL': '^So[1-9][0-9a-zA-Z]{48}$',
    'DOGE': '^D[0-9a-fA-F]{32}$',
    'TRX': '^T[0-9a-fA-F]{33}$',
    'LTC': '^L[a-km-zA-HJ-NP-Z1-9]{26,33}$',
    'DOT': '^1[a-zA-Z0-9]{31}$',
    'LINK': '^0x[a-fA-F0-9]{40}$',
    'XLM': '^G[A-Z0-9]{55}$',
    'XMR': '^4[0-9A-Za-z]{94}$',
    'ATOM': '^cosmos1[a-z0-9]{38}$',
};
class ClusterAddresses extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'cluster_address';
        this.inputSchema = {
            address: { type: 'text', required: true },
            asset: { type: 'text', required: false },
            page: { type: 'text', required: false },
            page_limit: { type: 'float', required: false },
        };
        this.outputConfiguration = {
            addresses: {},
            pagination: {
                'nextPage': 'keyword'
            }
        };
    }
    inferAssetType(address) {
        return Object.keys(cryptoRegexPatterns).filter(asset => {
            return new RegExp(cryptoRegexPatterns[asset]).test(address);
        });
    }
    async invoke(inputs) {
        const matchedAssets = inputs.asset ? [inputs.asset] : this.inferAssetType(inputs.address);
        let overallResults = [];
        let overallNextPage = '';
        let overallTruncated = false;
        for (const asset of matchedAssets) {
            let url = `https://iapi.chainalysis.com/clusters/${inputs.address}/${asset}/addresses`;
            if (inputs.page) {
                url = url + `?page=${inputs.page}`;
            }
            const config = {
                method: 'get',
                url: url,
                headers: {
                    'Accept': 'application/json',
                    'token': this.config.token
                }
            };
            const response = await axios_1.default(config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
            const pageLimit = inputs.page_limit ? (inputs.page_limit === 0 ? Number.MAX_SAFE_INTEGER : inputs.page_limit) : Number.MAX_SAFE_INTEGER;
            if (response.data.nextPage != null) {
                let page = response.data.nextPage;
                let lastResult = { nextPage: '' };
                let sub_response;
                let pageCounter = 0;
                while (lastResult.nextPage !== null && pageCounter < pageLimit) {
                    let sub_url = `https://iapi.chainalysis.com/clusters/${inputs.address}/${asset}/addresses?page=${page}`;
                    const sub_config = {
                        method: 'get',
                        url: sub_url,
                        headers: {
                            'Accept': 'application/json',
                            'token': this.config.token
                        }
                    };
                    sub_response = await axios_1.default(sub_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
                    lastResult = sub_response.data;
                    response.data.items.push.apply(response.data.items, sub_response.data.items);
                    page = lastResult.nextPage; // Update the page after all items have been processed for the current page.
                    pageCounter += 1;
                }
                overallNextPage = lastResult.nextPage;
            }
            for (let y = 0; y < response.data.items.length; y++) {
                Object.assign(response.data.items[y], {
                    rootAddress: response.data.rootAddress,
                    asset: response.data.asset,
                    id: `${response.data.asset}:${response.data.items[y].address}`
                });
            }
            overallResults.push.apply(overallResults, response.data.items);
        }
        return {
            addresses: overallResults,
            pagination: [{
                    totalresults: overallResults.length,
                    nextPage: overallNextPage
                }]
        };
    }
}
exports.default = ClusterAddresses;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
