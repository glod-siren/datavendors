"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web_service_interface_1 = require("@sirensolutions/web-service-interface");
const axios_1 = require("axios");
const cryptoRegexPatterns = {
    'BTC': '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
    'ETH': '^(?:0x)?[a-fA-F0-9]{40,42}$',
    'XRP': '^r[0-9a-zA-Z]{24,34}$',
    'BNB': '^bnb[0-9a-zA-Z]{38}$',
    'ADA': '^Ae2tdPwUPEYy{44}$',
    'SOL': '^So[1-9][0-9a-zA-Z]{48}$',
    'DOGE': '^D[0-9a-fA-F]{32}$',
    'TRX': '^T[0-9a-fA-F]{33}$',
    'LTC': '^L[a-km-zA-HJ-NP-Z1-9]{26,33}$',
    'DOT': '^1[a-zA-Z0-9]{31}$',
    'LINK': '^0x[a-fA-F0-9]{40}$',
    'XLM': '^G[A-Z0-9]{55}$',
    'XMR': '^4[0-9A-Za-z]{94}$',
    'ATOM': '^cosmos1[a-z0-9]{38}$',
};
class ClusterAddresses extends web_service_interface_1.ServiceDefinition {
    constructor() {
        super(...arguments);
        this.name = 'cluster_address';
        this.inputSchema = {
            address: { type: 'text', required: true },
            asset: { type: 'text', required: false },
            page: { type: 'text', required: false },
            page_limit: { type: 'float', required: false },
        };
        this.outputConfiguration = {
            addresses: {},
            pagination: {
                'nextPage': 'keyword'
            }
        };
    }
    inferAssetType(address) {
        return Object.keys(cryptoRegexPatterns).filter(asset => {
            return new RegExp(cryptoRegexPatterns[asset]).test(address);
        });
    }
    async invoke(inputs) {
        const matchedAssets = inputs.asset ? [inputs.asset] : this.inferAssetType(inputs.address);
        let overallResults = [];
        let overallNextPage = '';
        let overallTruncated = false;
        for (const asset of matchedAssets) {
            let url = `https://iapi.chainalysis.com/clusters/${inputs.address}/${asset}/addresses?size=400`;
            if (inputs.page) {
                url = url + `&page=${inputs.page}`;
            }
            const config = {
                method: 'get',
                url: url,
                headers: {
                    'Accept': 'application/json',
                    'token': this.config.token
                }
            };
            const response = await axios_1.default(config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
            const pageLimit = inputs.page_limit ? (inputs.page_limit === 0 ? Number.MAX_SAFE_INTEGER : inputs.page_limit) : Number.MAX_SAFE_INTEGER;
            if (response.data.nextPage != null) {
                let page = response.data.nextPage;
                let lastResult = { nextPage: '' };
                let sub_response;
                let pageCounter = 0;
                while (lastResult.nextPage !== null && pageCounter < pageLimit) {
                    let sub_url = `https://iapi.chainalysis.com/clusters/${inputs.address}/${asset}/addresses?size=400&page=${page}`;
                    const sub_config = {
                        method: 'get',
                        url: sub_url,
                        headers: {
                            'Accept': 'application/json',
                            'token': this.config.token
                        }
                    };
                    sub_response = await axios_1.default(sub_config).catch(err => Promise.reject(err.response && err.response.status < 500 ? new web_service_interface_1.WebServiceError(err.response.data) : err));
                    lastResult = sub_response.data;
                    response.data.items.push.apply(response.data.items, sub_response.data.items);
                    page = lastResult.nextPage; // Update the page after all items have been processed for the current page.
                    pageCounter += 1;
                }
                overallNextPage = lastResult.nextPage;
            }
            for (let y = 0; y < response.data.items.length; y++) {
                Object.assign(response.data.items[y], {
                    rootAddress: response.data.rootAddress,
                    asset: response.data.asset,
                    id: `${response.data.asset}:${response.data.items[y].address}`
                });
            }
            overallResults.push.apply(overallResults, response.data.items);
        }
        return {
            addresses: overallResults,
            pagination: [{
                    totalresults: overallResults.length,
                    nextPage: overallNextPage
                }]
        };
    }
}
exports.default = ClusterAddresses;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEU7UUFDRCxPQUFPO1lBQ0wsU0FBUyxFQUFFLGNBQWM7WUFDekIsVUFBVSxFQUFFLENBQUM7b0JBQ1gsWUFBWSxFQUFFLGNBQWMsQ0FBQyxNQUFNO29CQUNuQyxRQUFRLEVBQUUsZUFBZTtpQkFDMUIsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0NBQ0Y7QUExRkQsbUNBMEZDIiwiZmlsZSI6InNyYy9DbHVzdGVyQWRkcmVzc2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YUluZGV4UmVzdWx0cywgSW5wdXRTY2hlbWEsIE91dHB1dENvbmZpZ3VyYXRpb24sIFNlcnZpY2VEZWZpbml0aW9uLCBXZWJTZXJ2aWNlRXJyb3IgfSBmcm9tICdAc2lyZW5zb2x1dGlvbnMvd2ViLXNlcnZpY2UtaW50ZXJmYWNlJztcbmltcG9ydCBheGlvcywgeyBBeGlvc1JlcXVlc3RDb25maWcsIEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcyc7XG5cbmNvbnN0IGNyeXB0b1JlZ2V4UGF0dGVybnMgPSB7XG4gICdCVEMnOiAnXihiYzF8WzEzXSlbYS16QS1ISi1OUC1aMC05XXsyNSwzOX0kJywgLy8gQml0Y29pbiAoQlRDKSBpbmNsdWRpbmcgYmVjaDMyIGFkZHJlc3Nlc1xuICAnRVRIJzogJ14oPzoweCk/W2EtZkEtRjAtOV17NDAsNDJ9JCcsIC8vIEV0aGVyZXVtXG4gICdYUlAnOiAnXnJbMC05YS16QS1aXXsyNCwzNH0kJywgLy8gUmlwcGxlXG4gICdCTkInOiAnXmJuYlswLTlhLXpBLVpdezM4fSQnLCAvLyBCaW5hbmNlIENvaW5cbiAgJ0FEQSc6ICdeQWUydGRQd1VQRVl5ezQ0fSQnLCAvLyBDYXJkYW5vXG4gICdTT0wnOiAnXlNvWzEtOV1bMC05YS16QS1aXXs0OH0kJywgLy8gU29sYW5hXG4gICdET0dFJzogJ15EWzAtOWEtZkEtRl17MzJ9JCcsIC8vIERvZ2Vjb2luXG4gICdUUlgnOiAnXlRbMC05YS1mQS1GXXszM30kJywgLy8gVHJvblxuICAnTFRDJzogJ15MW2Eta20tekEtSEotTlAtWjEtOV17MjYsMzN9JCcsIC8vIExpdGVjb2luXG4gICdET1QnOiAnXjFbYS16QS1aMC05XXszMX0kJywgLy8gUG9sa2Fkb3RcbiAgJ0xJTksnOiAnXjB4W2EtZkEtRjAtOV17NDB9JCcsIC8vIENoYWlubGlua1xuICAnWExNJzogJ15HW0EtWjAtOV17NTV9JCcsIC8vIFN0ZWxsYXIgTHVtZW5zXG4gICdYTVInOiAnXjRbMC05QS1aYS16XXs5NH0kJywgLy8gTW9uZXJvXG4gICdBVE9NJzogJ15jb3Ntb3MxW2EtejAtOV17Mzh9JCcsIC8vIENvc21vc1xuICAvLyBBZGQgbW9yZSBwYXR0ZXJucyBoZXJlIGZvciBvdGhlciBjcnlwdG9jdXJyZW5jaWVzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbHVzdGVyQWRkcmVzc2VzIGV4dGVuZHMgU2VydmljZURlZmluaXRpb24ge1xuICByZWFkb25seSBuYW1lID0gJ2NsdXN0ZXJfYWRkcmVzcyc7XG4gIHJlYWRvbmx5IGlucHV0U2NoZW1hOiBJbnB1dFNjaGVtYSA9IHtcbiAgICBhZGRyZXNzOiB7IHR5cGU6ICd0ZXh0JywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBhc3NldDogeyB0eXBlOiAndGV4dCcsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICAgIHBhZ2U6IHsgdHlwZTogJ3RleHQnLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICBwYWdlX2xpbWl0OiB7IHR5cGU6ICdmbG9hdCcsIHJlcXVpcmVkOiBmYWxzZSB9LFxuICB9O1xuICByZWFkb25seSBvdXRwdXRDb25maWd1cmF0aW9uOiBPdXRwdXRDb25maWd1cmF0aW9uID0ge1xuICAgIGFkZHJlc3Nlczoge30sXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgJ25leHRQYWdlJzogJ2tleXdvcmQnXG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgaW5mZXJBc3NldFR5cGUoYWRkcmVzczogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhjcnlwdG9SZWdleFBhdHRlcm5zKS5maWx0ZXIoYXNzZXQgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoY3J5cHRvUmVnZXhQYXR0ZXJuc1thc3NldF0pLnRlc3QoYWRkcmVzcyk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBpbnZva2UoaW5wdXRzOiB7XG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIGFzc2V0Pzogc3RyaW5nLFxuICAgIHBhZ2U6IHN0cmluZyxcbiAgICBwYWdlX2xpbWl0OiBudW1iZXJcbiAgfSk6IFByb21pc2U8RGF0YUluZGV4UmVzdWx0cz4ge1xuICAgIGNvbnN0IG1hdGNoZWRBc3NldHMgPSBpbnB1dHMuYXNzZXQgPyBbaW5wdXRzLmFzc2V0XSA6IHRoaXMuaW5mZXJBc3NldFR5cGUoaW5wdXRzLmFkZHJlc3MpO1xuICAgIGxldCBvdmVyYWxsUmVzdWx0cyA9IFtdO1xuICAgIGxldCBvdmVyYWxsTmV4dFBhZ2UgPSAnJztcbiAgICBsZXQgb3ZlcmFsbFRydW5jYXRlZCA9IGZhbHNlO1xuXG4gICAgZm9yIChjb25zdCBhc3NldCBvZiBtYXRjaGVkQXNzZXRzKSB7XG4gICAgICBsZXQgdXJsID0gYGh0dHBzOi8vaWFwaS5jaGFpbmFseXNpcy5jb20vY2x1c3RlcnMvJHtpbnB1dHMuYWRkcmVzc30vJHthc3NldH0vYWRkcmVzc2VzP3NpemU9NDAwYDtcbiAgICAgIGlmIChpbnB1dHMucGFnZSkge1xuICAgICAgICB1cmwgPSB1cmwgKyBgJnBhZ2U9JHtpbnB1dHMucGFnZX1gO1xuICAgICAgfVxuICAgICAgY29uc3QgY29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcgPSB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAndG9rZW4nOiB0aGlzLmNvbmZpZy50b2tlblxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UgPSBhd2FpdCBheGlvcyhjb25maWcpLmNhdGNoKGVyciA9PiBQcm9taXNlLnJlamVjdChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLnN0YXR1cyA8IDUwMCA/IG5ldyBXZWJTZXJ2aWNlRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEpIDogZXJyKSk7XG4gICAgICBjb25zdCBwYWdlTGltaXQgPSBpbnB1dHMucGFnZV9saW1pdCA/IChpbnB1dHMucGFnZV9saW1pdCA9PT0gMCA/IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIDogaW5wdXRzLnBhZ2VfbGltaXQpIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLm5leHRQYWdlICE9IG51bGwpIHtcbiAgICAgICAgbGV0IHBhZ2UgPSByZXNwb25zZS5kYXRhLm5leHRQYWdlO1xuICAgICAgICBsZXQgbGFzdFJlc3VsdCA9IHsgbmV4dFBhZ2U6ICcnIH07XG4gICAgICAgIGxldCBzdWJfcmVzcG9uc2U6IEF4aW9zUmVzcG9uc2U7XG4gICAgICAgIGxldCBwYWdlQ291bnRlciA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGxhc3RSZXN1bHQubmV4dFBhZ2UgIT09IG51bGwgJiYgcGFnZUNvdW50ZXIgPCBwYWdlTGltaXQpIHtcbiAgICAgICAgICBsZXQgc3ViX3VybCA9IGBodHRwczovL2lhcGkuY2hhaW5hbHlzaXMuY29tL2NsdXN0ZXJzLyR7aW5wdXRzLmFkZHJlc3N9LyR7YXNzZXR9L2FkZHJlc3Nlcz9zaXplPTQwMCZwYWdlPSR7cGFnZX1gO1xuICAgICAgICAgIGNvbnN0IHN1Yl9jb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHtcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgICAgICB1cmw6IHN1Yl91cmwsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICd0b2tlbic6IHRoaXMuY29uZmlnLnRva2VuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHN1Yl9yZXNwb25zZSA9IGF3YWl0IGF4aW9zKHN1Yl9jb25maWcpLmNhdGNoKGVyciA9PiBQcm9taXNlLnJlamVjdChlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLnN0YXR1cyA8IDUwMCA/IG5ldyBXZWJTZXJ2aWNlRXJyb3IoZXJyLnJlc3BvbnNlLmRhdGEpIDogZXJyKSk7XG4gICAgICAgICAgbGFzdFJlc3VsdCA9IHN1Yl9yZXNwb25zZS5kYXRhO1xuICAgICAgICAgIHJlc3BvbnNlLmRhdGEuaXRlbXMucHVzaC5hcHBseShyZXNwb25zZS5kYXRhLml0ZW1zLCBzdWJfcmVzcG9uc2UuZGF0YS5pdGVtcylcbiAgICAgICAgICBwYWdlID0gbGFzdFJlc3VsdC5uZXh0UGFnZTsgLy8gVXBkYXRlIHRoZSBwYWdlIGFmdGVyIGFsbCBpdGVtcyBoYXZlIGJlZW4gcHJvY2Vzc2VkIGZvciB0aGUgY3VycmVudCBwYWdlLlxuICAgICAgICAgIHBhZ2VDb3VudGVyICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcmFsbE5leHRQYWdlID0gbGFzdFJlc3VsdC5uZXh0UGFnZVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCByZXNwb25zZS5kYXRhLml0ZW1zLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVzcG9uc2UuZGF0YS5pdGVtc1t5XSwge1xuICAgICAgICAgIHJvb3RBZGRyZXNzOiByZXNwb25zZS5kYXRhLnJvb3RBZGRyZXNzLFxuICAgICAgICAgIGFzc2V0OiByZXNwb25zZS5kYXRhLmFzc2V0LFxuICAgICAgICAgIGlkOiBgJHtyZXNwb25zZS5kYXRhLmFzc2V0fToke3Jlc3BvbnNlLmRhdGEuaXRlbXNbeV0uYWRkcmVzc31gXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgb3ZlcmFsbFJlc3VsdHMucHVzaC5hcHBseShvdmVyYWxsUmVzdWx0cywgcmVzcG9uc2UuZGF0YS5pdGVtcyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBhZGRyZXNzZXM6IG92ZXJhbGxSZXN1bHRzLFxuICAgICAgcGFnaW5hdGlvbjogW3tcbiAgICAgICAgdG90YWxyZXN1bHRzOiBvdmVyYWxsUmVzdWx0cy5sZW5ndGgsXG4gICAgICAgIG5leHRQYWdlOiBvdmVyYWxsTmV4dFBhZ2VcbiAgICAgIH1dXG4gICAgfTtcbiAgfVxufVxuIl19
